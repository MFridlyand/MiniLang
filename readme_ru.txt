И так перед вами простейший язык программирования, изначально написанный для преподавания. Язык поддерживает:
    * базовые алгоритмические конструкции if while 
    * локальные и глобальные переменные типа double
    * массивы
    * возможность определения фунцкций и рекурсию
    * есть возможность добавлять встроенные функции 
    Основной целью при написании этого языка была простота реализации, здесь не строится AST, не генерируется байт код. 
Входной поток разбивается на токены простейшим лексером, затем используется метод рекурсивного спуска, который и выполняет все вычисления.
Давайте рассмотрим несколько примеров:

Пример 1:

function gcd ( m , n )
{
	while  m != n 
	{
		if m > n 
			{ m = m - n }
		else
			{ n = n - m }
	}
	return m
}

print call gcd ( 100 , 40 )

Output: 20
Здесь определяется функция, которая вычисляет НОД двух чисел, использую алгоритм евклида, аргументы перадаются по значению,
для вызова функции используется ключевое слово call. Обратите внимание что токены отделяются друг от друга пробелами и переносами строки

Пример 2:

function sort ( a )
{
	var sz = call array_size ( a )
	if sz < 2
	{
		return 0
	}
	var i = 0
	var j = 0
	var t = 0
	while i < sz
	{
		j = i + 1
		while j < sz
		{
			if a [ j ] < a [ i ]
			{
				t = a [ i ]
				a [ i ] = a [ j ]
				a [ j ] = t
			}
			j = j + 1
		}		
		i = i + 1
	}
}

var data = call make_array ( 0 )
call array_add ( data , 10 )
call array_add ( data , 4 )
call array_add ( data , 5 )
call array_add ( data , -5 )
call array_add ( data , 1 )
call array_add ( data , 2 )
call array_add ( data , 3 )

call printArray ( data )
call qsort ( data )
print "sorted:"
call printArray ( data )

    Этот пример демонстрирует реализацию сортировки массива методом простого выбора. Входной массив передается по ссылке,
для объявления переменной используется ключевое слово var. Для возврата значения из функции используется ключевое слово return.
Для работы с массивами в языке определенны следующие функции:
    * make_array ( size ) - создает массив заданного размера
    * array_add ( array , value ) - добавляет элемент в массив
    * array_copy ( array ) - копирует массив
    * array_free ( array ) - освобождает память выделенные под массив

Несмотря на свою простоту язык является тьюринг полным, в папке с примерами вы найдете другие примеры, в частности пример связанного списка